#include<stdio.h>
#define INFINITY 99
void dijkstra(int G[10][10],int n,int startnode);
void main()
{ int G[10][10],i,j,n,u;
printf("enter no.of vertices:");
scanf("%d",&n);
printf("\n enter the Adjencency matrix:\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{ printf("enter the edge between %dand%d",i,j);
scanf("%d",&G[i][j]);
} printf("\nenter the starting node:");
scanf("%d",&u);
dijkstra(G,n,u);
} void dijkstra(int G[10][10],int n,int startnode)
{ int cost[10][10],distance[10],pred[10];
int visited[10],count,mindistance,nextnode,i,j;
for(i=0;i<n;i++)
for(j=0;j<n;j++)
if(G[i][j]==0)
cost[i][j]=INFINITY;
else
cost[i][j]=G[i][j];
for(i=0;i<n;i++)
{ distance[i]=cost[startnode][i];
pred[i]=startnode;
visited[i]=0;
} distance[startnode]=0;
visited[startnode]=1;
count=1;
while(count<n-1)
{ mindistance=INFINITY;
for(i=0;i<n;i++)
if(distance[i]<mindistance&&!visited[i])
{ mindistance=distance[i];
nextnode=i;
} visited[nextnode]=1;
for(i=0;i<n;i++)
if(!visited[i])
if(mindistance+cost[nextnode][i]<distance[i])
{ distance[i]=mindistance+cost[nextnode][i];
pred[i]=nextnode;}
count++;
} for(i=0;i<n;i++)
if(i!=startnode)
{ printf("\ndistance of node%d=%d",i,distance[i]);
printf("\nPath=%d",i);
j=1;
do
{ j=pred[j];
printf("<-%d",j);
}while(j!=startnode);
}}