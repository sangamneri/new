
#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;
typedef struct HashTable {
    int size;
    Node** buckets;
} HashTable;
Node* createNode(int key, int value) {
    Node* node = (Node*) malloc(sizeof(Node));
    node->key = key;
    node->value = value;
    node->next = NULL;
    return node;
}
HashTable* createHashTable(int size) {
    HashTable* hashTable = (HashTable*) malloc(sizeof(HashTable));
    hashTable->size = size;
    hashTable->buckets = (Node**) calloc(size, sizeof(Node*));
    return hashTable;
}
int hash(HashTable* hashTable, int key) {
    return key % hashTable->size;
}
void insert(HashTable* hashTable, int key, int value) {
    int index = hash(hashTable, key);
    Node* node = createNode(key, value);
    if (hashTable->buckets[index] == NULL) {
        hashTable->buckets[index] = node;
    } else {
        Node* current = hashTable->buckets[index];
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = node;
    }
}
int get(HashTable* hashTable, int key) {
    int index = hash(hashTable, key);
    Node* current = hashTable->buckets[index];
    while (current != NULL) {
        if (current->key == key) {
            return current->value;
        }
        current = current->next;
    }
    return -1;
}
void delete(HashTable* hashTable, int key) {
    int index = hash(hashTable, key);
    Node* current = hashTable->buckets[index];
    Node* previous = NULL;
    while (current != NULL) {
        if (current->key == key) {
            if (previous == NULL) {
                hashTable->buckets[index] = current->next;
            } else {
                previous->next = current->next;
            }
            free(current);
            return;
        }
        previous = current;
        current = current->next;
    }
}

int main() {
    HashTable* hashTable = createHashTable(10);
    insert(hashTable, 1, 10);
    insert(hashTable, 2, 20);
    insert(hashTable, 11, 100);
    printf("Value for key 1: %d\n", get(hashTable, 1));
    printf("Value for key 2: %d\n", get(hashTable, 2));
    printf("Value for key 11: %d\n", get(hashTable, 11));
    delete(hashTable, 2);
    printf("Value for key 2 after deletion: %d\n", get(hashTable, 2));
    return 0;
}
